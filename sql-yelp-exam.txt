- List the cities with the most reviews in descending order:
	SQL code used to arrive at answer:	
SELECT City, SUM(Review_count) AS Review_Total
FROM Business
GROUP BY City
ORDER BY Review_Total DESC;
	
	Copy and Paste the Result Below:	
+-----------------+--------------+
| city            | Review_Total |
+-----------------+--------------+
| Las Vegas       |        82854 |
| Phoenix         |        34503 |
| Toronto         |        24113 |
| Scottsdale      |        20614 |
| Charlotte       |        12523 |
| Henderson       |        10871 |
| Tempe           |        10504 |
| Pittsburgh      |         9798 |
| Montréal        |         9448 |
| Chandler        |         8112 |
| Mesa            |         6875 |
| Gilbert         |         6380 |
| Cleveland       |         5593 |
| Madison         |         5265 |
| Glendale        |         4406 |
| Mississauga     |         3814 |
| Edinburgh       |         2792 |
| Peoria          |         2624 |
| North Las Vegas |         2438 |
| Markham         |         2352 |
| Champaign       |         2029 |
| Stuttgart       |         1849 |
| Surprise        |         1520 |
| Lakewood        |         1465 |
| Goodyear        |         1155 |
+-----------------+--------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
- Find the distribution of star ratings to the business in the following cities:
i. Avon
SQL code used to arrive at answer:
SELECT COUNT(Stars) AS Count, Stars AS Star_Rating
FROM Business
WHERE City =='Avon'
GROUP BY Star_Rating;

Copy and Paste the Resulting Table Below (2 columns, star rating and count):
+-------+-------------+
| Count | Star_Rating |
+-------+-------------+
|     1 |         1.5 |
|     2 |         2.5 |
|     3 |         3.5 |
|     2 |         4.0 |
|     1 |         4.5 |
|     1 |         5.0 |
+-------+-------------+

ii. Beachwood
SQL code used to arrive at answer:
SELECT COUNT(Stars) AS Count, Stars AS Star_Rating
FROM Business
WHERE City =='Beachwood'
GROUP BY Star_Rating;

Copy and Paste the Resulting Table Below (2 columns, star rating and count):	
+-------+-------------+
| Count | Star_Rating |
+-------+-------------+
|     1 |         2.0 |
|     1 |         2.5 |
|     2 |         3.0 |
|     2 |         3.5 |
|     1 |         4.0 |
|     2 |         4.5 |
|     5 |         5.0 |
+-------+-------------+

-Find the top 3 users based on their total number of reviews:		
	SQL code used to arrive at answer:
SELECT name, review_count
FROM user
ORDER BY review_count DESC
Limit 3;	
		
	Copy and Paste the Result Below:		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

- Are there more reviews with the word "love" or with the word "hate" in them?
	Answer: More reviews contain the word "love"

	SQL code used to arrive at answer:
SELECT (
    SELECT COUNT(Text)
    FROM Review
    WHERE Text LIKE "%love%") AS Love_Total,
        (SELECT COUNT (Text)
        FROM Review
        WHERE Text LIKE "%hate%") AS Hate_Total;

Part 2: Inferences and Analysis

- Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.	
i. Do the two groups you chose to analyze have a different distribution of hours?
 The restaurant with 4-5 stars is only open five days (Wed-Sun) for a limited number of hours (6pm-11pm, and 12-6pm on Sunday), primarily in the evening. The 2-3 star restaurants are open 7 days a week, with hours ranging from 9-11am open and 4pm-10pm close.  
ii. Do the two groups you chose to analyze have a different number of reviews?
 Yes, the 4-5 star restaurant has almostt twice as many reviews as the 2-3 star restaurants (89 for the 4-5 star restaurant;  34, 47, and 5 for the 2-3 star).   
iii. Are you able to infer anything from the location data provided between these two groups? Explain.
All of the 2-3 star restaurants are located in the central business district in Toronto where many people work, which could explain why they are open during lunch hours. The 4-5 star restaurant is downtown adjacent in a predominately residential area. 
SQL code used for analysis:

SELECT b.name, b.neighborhood, b.postal_code, b.review_count, b.stars, b.is_open, c.category, h.hours,
    CASE
        WHEN b.stars BETWEEN 2 and 3 THEN '2-3 stars'
        WHEN b.stars BETWEEN 3 and 4 THEN '4-5 stars'
        END AS star_range
FROM Business b 
INNER JOIN Category c 
ON b.id = c.business_id
INNER JOIN hours h
ON b.id = h.business_id
WHERE b.city ='Toronto' AND c.category='Restaurants' AND star_range ='4-5 stars'--or '2-3 stars
GROUP BY h.hours;

3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.
i. Indicate the type of analysis you chose to do:
I would like to do an exploratory analysis of the review data in terms of whether or not restaurants with a high level of engagement on their reviews (users marking reviews 'funny, helpful, cool) correlates with the number of reviews or a higher star rating. Some questions I would like to explore are:
- do restaurants with the highest star ratings have higher or lower engagement totals?
- do restaurants with the highest number of reviews marked 'funny' have a lower rating than average? I would expect so, as negative reviews tend to be written in a more comical style than positive ones.
- what is the level of engagement on the restaurants with the highest and lowest star ratings?
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I will be using the Business and Review tables, specifically the useful/funny/cool columns from Review and the stars and review count from the Business data. I was going to use the Category table to pull reviews from businesses labeled 'Restaurants', but it turned out to be a very small dataset. Instead, I opted to filter the Review table by review text that included the word 'food', which gave me more to work with. I also created a new column for Engagement Level based on the total number of reviews voted useful/funny/cool.
iv. Provide the SQL code you used to create your final dataset:

SELECT b.name, b.city, b.stars, b.review_count, b.is_open, r.useful, r.funny, r.cool,
SUM(r.useful + r.funny + r.cool) AS Total_Engagement, 
CASE 
    WHEN SUM(r.useful + r.funny + r.cool) <1 THEN 'No Engagement'
    WHEN SUM(r.useful + r.funny + r.cool) BETWEEN 1 and 3 THEN 'Low Engagement'
    WHEN SUM(r.useful + r.funny + r.cool) BETWEEN 4 and 8 THEN 'Moderate Engagement'
    WHEN SUM(r.useful + r.funny + r.cool) >8 THEN 'Heavy Engagement'
    END AS Engagement_Level
FROM Business b 
JOIN Review r ON b.id=r.business_id
WHERE b.is_open =1 AND r.text LIKE "%food%"
GROUP BY b.id  
ORDER BY b.stars desc;
